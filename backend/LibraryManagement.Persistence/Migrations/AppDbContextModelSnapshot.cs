// <auto-generated />
using System;
using LibraryManagement.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibraryManagement.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibraryManagement.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableQuantity = 20,
                            CategoryId = 1,
                            Title = "Galactic Odyssey",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 2,
                            AvailableQuantity = 20,
                            CategoryId = 1,
                            Title = "Mars Frontier",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 3,
                            AvailableQuantity = 20,
                            CategoryId = 1,
                            Title = "Quantum Rift",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 4,
                            AvailableQuantity = 20,
                            CategoryId = 1,
                            Title = "The Last Starship",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 5,
                            AvailableQuantity = 20,
                            CategoryId = 1,
                            Title = "Echoes of Andromeda",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 6,
                            AvailableQuantity = 20,
                            CategoryId = 2,
                            Title = "Dragon's Oath",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 7,
                            AvailableQuantity = 20,
                            CategoryId = 2,
                            Title = "Sword of Silverwood",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 8,
                            AvailableQuantity = 20,
                            CategoryId = 2,
                            Title = "Chronicles of Eldoria",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 9,
                            AvailableQuantity = 20,
                            CategoryId = 2,
                            Title = "The Forgotten Kingdom",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 10,
                            AvailableQuantity = 20,
                            CategoryId = 2,
                            Title = "Mageborn Legacy",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 11,
                            AvailableQuantity = 20,
                            CategoryId = 3,
                            Title = "Midnight in Maple Town",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 12,
                            AvailableQuantity = 20,
                            CategoryId = 3,
                            Title = "The Vanishing Key",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 13,
                            AvailableQuantity = 20,
                            CategoryId = 3,
                            Title = "Whispers in the Attic",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 14,
                            AvailableQuantity = 20,
                            CategoryId = 3,
                            Title = "Shadow at Rivermere",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 15,
                            AvailableQuantity = 20,
                            CategoryId = 3,
                            Title = "Cold Case Harbor",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 16,
                            AvailableQuantity = 20,
                            CategoryId = 4,
                            Title = "Letters to Vienna",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 17,
                            AvailableQuantity = 20,
                            CategoryId = 4,
                            Title = "Summer at Willow Lake",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 18,
                            AvailableQuantity = 20,
                            CategoryId = 4,
                            Title = "Falling for Florence",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 19,
                            AvailableQuantity = 20,
                            CategoryId = 4,
                            Title = "Tides of the Heart",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 20,
                            AvailableQuantity = 20,
                            CategoryId = 4,
                            Title = "Paris in Bloom",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 21,
                            AvailableQuantity = 20,
                            CategoryId = 5,
                            Title = "Mindset Matters",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 22,
                            AvailableQuantity = 20,
                            CategoryId = 5,
                            Title = "The Power of Habits",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 23,
                            AvailableQuantity = 20,
                            CategoryId = 5,
                            Title = "Climate Change 101",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 24,
                            AvailableQuantity = 20,
                            CategoryId = 5,
                            Title = "Digital Minimalism",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 25,
                            AvailableQuantity = 20,
                            CategoryId = 5,
                            Title = "Nutrition Decoded",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 26,
                            AvailableQuantity = 20,
                            CategoryId = 6,
                            Title = "Empire of Sands",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 27,
                            AvailableQuantity = 20,
                            CategoryId = 6,
                            Title = "The Silk Road Story",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 28,
                            AvailableQuantity = 20,
                            CategoryId = 6,
                            Title = "Revolution 1776",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 29,
                            AvailableQuantity = 20,
                            CategoryId = 6,
                            Title = "World War Chronicles",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 30,
                            AvailableQuantity = 20,
                            CategoryId = 6,
                            Title = "Ancient Egypt Revealed",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 31,
                            AvailableQuantity = 20,
                            CategoryId = 7,
                            Title = "The Steve Jobs Way",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 32,
                            AvailableQuantity = 20,
                            CategoryId = 7,
                            Title = "Long Walk to Freedom",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 33,
                            AvailableQuantity = 20,
                            CategoryId = 7,
                            Title = "Becoming Elon",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 34,
                            AvailableQuantity = 20,
                            CategoryId = 7,
                            Title = "The Ruth Bader Story",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 35,
                            AvailableQuantity = 20,
                            CategoryId = 7,
                            Title = "Mozart: A Life",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 36,
                            AvailableQuantity = 20,
                            CategoryId = 8,
                            Title = "The Lost Unicorn",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 37,
                            AvailableQuantity = 20,
                            CategoryId = 8,
                            Title = "Adventures of Tiny Tim",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 38,
                            AvailableQuantity = 20,
                            CategoryId = 8,
                            Title = "Space Pups",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 39,
                            AvailableQuantity = 20,
                            CategoryId = 8,
                            Title = "The Rainbow Treehouse",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 40,
                            AvailableQuantity = 20,
                            CategoryId = 8,
                            Title = "Pirates of Jellybean Bay",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 41,
                            AvailableQuantity = 20,
                            CategoryId = 9,
                            Title = "Atomic Focus",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 42,
                            AvailableQuantity = 20,
                            CategoryId = 9,
                            Title = "Unbreakable Confidence",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 43,
                            AvailableQuantity = 20,
                            CategoryId = 9,
                            Title = "30-Day Productivity",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 44,
                            AvailableQuantity = 20,
                            CategoryId = 9,
                            Title = "The Joy of Saying No",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 45,
                            AvailableQuantity = 20,
                            CategoryId = 9,
                            Title = "Stress-Free Living",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 46,
                            AvailableQuantity = 20,
                            CategoryId = 10,
                            Title = "AI for Everyone",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 47,
                            AvailableQuantity = 20,
                            CategoryId = 10,
                            Title = "Building with .NET 8",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 48,
                            AvailableQuantity = 20,
                            CategoryId = 10,
                            Title = "Cyber-Security Essentials",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 49,
                            AvailableQuantity = 20,
                            CategoryId = 10,
                            Title = "Data Science Crash Course",
                            TotalQuantity = 20
                        },
                        new
                        {
                            Id = 50,
                            AvailableQuantity = 20,
                            CategoryId = 10,
                            Title = "Intro to Quantum Computing",
                            TotalQuantity = 20
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.BookBorrowingRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApproverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestorId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("RequestorId");

                    b.ToTable("BookBorrowingRequests", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApproverId = 8,
                            DateRequested = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 1,
                            Status = 0
                        },
                        new
                        {
                            Id = 2,
                            ApproverId = 9,
                            DateRequested = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 2,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            ApproverId = 10,
                            DateRequested = new DateTime(2024, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 3,
                            Status = 2
                        },
                        new
                        {
                            Id = 4,
                            ApproverId = 8,
                            DateRequested = new DateTime(2024, 12, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 4,
                            Status = 0
                        },
                        new
                        {
                            Id = 5,
                            ApproverId = 9,
                            DateRequested = new DateTime(2024, 12, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 5,
                            Status = 1
                        },
                        new
                        {
                            Id = 6,
                            ApproverId = 10,
                            DateRequested = new DateTime(2024, 12, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 6,
                            Status = 2
                        },
                        new
                        {
                            Id = 7,
                            ApproverId = 8,
                            DateRequested = new DateTime(2024, 12, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 7,
                            Status = 0
                        },
                        new
                        {
                            Id = 8,
                            ApproverId = 9,
                            DateRequested = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 9,
                            ApproverId = 10,
                            DateRequested = new DateTime(2024, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = 10,
                            ApproverId = 8,
                            DateRequested = new DateTime(2024, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 3,
                            Status = 0
                        },
                        new
                        {
                            Id = 11,
                            ApproverId = 9,
                            DateRequested = new DateTime(2024, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 4,
                            Status = 1
                        },
                        new
                        {
                            Id = 12,
                            ApproverId = 10,
                            DateRequested = new DateTime(2024, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 5,
                            Status = 2
                        },
                        new
                        {
                            Id = 13,
                            ApproverId = 8,
                            DateRequested = new DateTime(2024, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 6,
                            Status = 0
                        },
                        new
                        {
                            Id = 14,
                            ApproverId = 9,
                            DateRequested = new DateTime(2024, 12, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 7,
                            Status = 1
                        },
                        new
                        {
                            Id = 15,
                            ApproverId = 10,
                            DateRequested = new DateTime(2024, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 1,
                            Status = 2
                        },
                        new
                        {
                            Id = 16,
                            ApproverId = 8,
                            DateRequested = new DateTime(2024, 12, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 2,
                            Status = 0
                        },
                        new
                        {
                            Id = 17,
                            ApproverId = 9,
                            DateRequested = new DateTime(2024, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 3,
                            Status = 1
                        },
                        new
                        {
                            Id = 18,
                            ApproverId = 10,
                            DateRequested = new DateTime(2024, 12, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 4,
                            Status = 2
                        },
                        new
                        {
                            Id = 19,
                            ApproverId = 8,
                            DateRequested = new DateTime(2024, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 5,
                            Status = 0
                        },
                        new
                        {
                            Id = 20,
                            ApproverId = 9,
                            DateRequested = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RequestorId = 6,
                            Status = 1
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.BookBorrowingRequestDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("RequestId", "BookId")
                        .IsUnique();

                    b.ToTable("BookBorrowingRequestDetails", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 1,
                            RequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 2,
                            RequestId = 1
                        },
                        new
                        {
                            Id = 3,
                            BookId = 3,
                            RequestId = 1
                        },
                        new
                        {
                            Id = 4,
                            BookId = 4,
                            RequestId = 1
                        },
                        new
                        {
                            Id = 5,
                            BookId = 6,
                            RequestId = 2
                        },
                        new
                        {
                            Id = 6,
                            BookId = 7,
                            RequestId = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 8,
                            RequestId = 2
                        },
                        new
                        {
                            Id = 8,
                            BookId = 9,
                            RequestId = 2
                        },
                        new
                        {
                            Id = 9,
                            BookId = 11,
                            RequestId = 3
                        },
                        new
                        {
                            Id = 10,
                            BookId = 12,
                            RequestId = 3
                        },
                        new
                        {
                            Id = 11,
                            BookId = 13,
                            RequestId = 3
                        },
                        new
                        {
                            Id = 12,
                            BookId = 14,
                            RequestId = 3
                        },
                        new
                        {
                            Id = 13,
                            BookId = 16,
                            RequestId = 4
                        },
                        new
                        {
                            Id = 14,
                            BookId = 17,
                            RequestId = 4
                        },
                        new
                        {
                            Id = 15,
                            BookId = 18,
                            RequestId = 4
                        },
                        new
                        {
                            Id = 16,
                            BookId = 19,
                            RequestId = 4
                        },
                        new
                        {
                            Id = 17,
                            BookId = 21,
                            RequestId = 5
                        },
                        new
                        {
                            Id = 18,
                            BookId = 22,
                            RequestId = 5
                        },
                        new
                        {
                            Id = 19,
                            BookId = 23,
                            RequestId = 5
                        },
                        new
                        {
                            Id = 20,
                            BookId = 24,
                            RequestId = 5
                        },
                        new
                        {
                            Id = 21,
                            BookId = 26,
                            RequestId = 6
                        },
                        new
                        {
                            Id = 22,
                            BookId = 27,
                            RequestId = 6
                        },
                        new
                        {
                            Id = 23,
                            BookId = 28,
                            RequestId = 6
                        },
                        new
                        {
                            Id = 24,
                            BookId = 29,
                            RequestId = 6
                        },
                        new
                        {
                            Id = 25,
                            BookId = 31,
                            RequestId = 7
                        },
                        new
                        {
                            Id = 26,
                            BookId = 32,
                            RequestId = 7
                        },
                        new
                        {
                            Id = 27,
                            BookId = 33,
                            RequestId = 7
                        },
                        new
                        {
                            Id = 28,
                            BookId = 34,
                            RequestId = 7
                        },
                        new
                        {
                            Id = 29,
                            BookId = 36,
                            RequestId = 8
                        },
                        new
                        {
                            Id = 30,
                            BookId = 37,
                            RequestId = 8
                        },
                        new
                        {
                            Id = 31,
                            BookId = 38,
                            RequestId = 8
                        },
                        new
                        {
                            Id = 32,
                            BookId = 39,
                            RequestId = 8
                        },
                        new
                        {
                            Id = 33,
                            BookId = 41,
                            RequestId = 9
                        },
                        new
                        {
                            Id = 34,
                            BookId = 42,
                            RequestId = 9
                        },
                        new
                        {
                            Id = 35,
                            BookId = 43,
                            RequestId = 9
                        },
                        new
                        {
                            Id = 36,
                            BookId = 44,
                            RequestId = 9
                        },
                        new
                        {
                            Id = 37,
                            BookId = 46,
                            RequestId = 10
                        },
                        new
                        {
                            Id = 38,
                            BookId = 47,
                            RequestId = 10
                        },
                        new
                        {
                            Id = 39,
                            BookId = 48,
                            RequestId = 10
                        },
                        new
                        {
                            Id = 40,
                            BookId = 49,
                            RequestId = 10
                        },
                        new
                        {
                            Id = 41,
                            BookId = 1,
                            RequestId = 11
                        },
                        new
                        {
                            Id = 42,
                            BookId = 2,
                            RequestId = 11
                        },
                        new
                        {
                            Id = 43,
                            BookId = 3,
                            RequestId = 11
                        },
                        new
                        {
                            Id = 44,
                            BookId = 6,
                            RequestId = 12
                        },
                        new
                        {
                            Id = 45,
                            BookId = 7,
                            RequestId = 12
                        },
                        new
                        {
                            Id = 46,
                            BookId = 8,
                            RequestId = 12
                        },
                        new
                        {
                            Id = 47,
                            BookId = 11,
                            RequestId = 13
                        },
                        new
                        {
                            Id = 48,
                            BookId = 12,
                            RequestId = 13
                        },
                        new
                        {
                            Id = 49,
                            BookId = 13,
                            RequestId = 13
                        },
                        new
                        {
                            Id = 50,
                            BookId = 16,
                            RequestId = 14
                        },
                        new
                        {
                            Id = 51,
                            BookId = 17,
                            RequestId = 14
                        },
                        new
                        {
                            Id = 52,
                            BookId = 18,
                            RequestId = 14
                        },
                        new
                        {
                            Id = 53,
                            BookId = 21,
                            RequestId = 15
                        },
                        new
                        {
                            Id = 54,
                            BookId = 22,
                            RequestId = 15
                        },
                        new
                        {
                            Id = 55,
                            BookId = 23,
                            RequestId = 15
                        },
                        new
                        {
                            Id = 56,
                            BookId = 26,
                            RequestId = 16
                        },
                        new
                        {
                            Id = 57,
                            BookId = 27,
                            RequestId = 16
                        },
                        new
                        {
                            Id = 58,
                            BookId = 28,
                            RequestId = 16
                        },
                        new
                        {
                            Id = 59,
                            BookId = 31,
                            RequestId = 17
                        },
                        new
                        {
                            Id = 60,
                            BookId = 32,
                            RequestId = 17
                        },
                        new
                        {
                            Id = 61,
                            BookId = 33,
                            RequestId = 17
                        },
                        new
                        {
                            Id = 62,
                            BookId = 36,
                            RequestId = 18
                        },
                        new
                        {
                            Id = 63,
                            BookId = 37,
                            RequestId = 18
                        },
                        new
                        {
                            Id = 64,
                            BookId = 38,
                            RequestId = 18
                        },
                        new
                        {
                            Id = 65,
                            BookId = 41,
                            RequestId = 19
                        },
                        new
                        {
                            Id = 66,
                            BookId = 42,
                            RequestId = 19
                        },
                        new
                        {
                            Id = 67,
                            BookId = 43,
                            RequestId = 19
                        },
                        new
                        {
                            Id = 68,
                            BookId = 46,
                            RequestId = 20
                        },
                        new
                        {
                            Id = 69,
                            BookId = 47,
                            RequestId = 20
                        },
                        new
                        {
                            Id = 70,
                            BookId = 48,
                            RequestId = 20
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Science-Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Mystery & Thriller"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = 6,
                            Name = "History"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Biography"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Children"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Technology"
                        });
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11111111-1111-1111-1111-111111111111",
                            Email = "user1@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@DEMO.LOCAL",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJ50uwTC9wQFvOvRAv6AXaph3HPE6S3jSnUFTevNgE1f8=",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "11111111-1111-1111-1111-111111111111",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22222222-2222-2222-2222-222222222222",
                            Email = "user2@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@DEMO.LOCAL",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJ50uwTC9wQFvOvRAv6AXaph3HPE6S3jSnUFTevNgE1f8=",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "22222222-2222-2222-2222-222222222222",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "33333333-3333-3333-3333-333333333333",
                            Email = "user3@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@DEMO.LOCAL",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJ50uwTC9wQFvOvRAv6AXaph3HPE6S3jSnUFTevNgE1f8=",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "33333333-3333-3333-3333-333333333333",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44444444-4444-4444-4444-444444444444",
                            Email = "user4@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@DEMO.LOCAL",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJ50uwTC9wQFvOvRAv6AXaph3HPE6S3jSnUFTevNgE1f8=",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "44444444-4444-4444-4444-444444444444",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55555555-5555-5555-5555-555555555555",
                            Email = "user5@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER5@DEMO.LOCAL",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJ50uwTC9wQFvOvRAv6AXaph3HPE6S3jSnUFTevNgE1f8=",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "55555555-5555-5555-5555-555555555555",
                            TwoFactorEnabled = false,
                            UserName = "user5"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66666666-6666-6666-6666-666666666666",
                            Email = "user6@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER6@DEMO.LOCAL",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJ50uwTC9wQFvOvRAv6AXaph3HPE6S3jSnUFTevNgE1f8=",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "66666666-6666-6666-6666-666666666666",
                            TwoFactorEnabled = false,
                            UserName = "user6"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77777777-7777-7777-7777-777777777777",
                            Email = "user7@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER7@DEMO.LOCAL",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJ50uwTC9wQFvOvRAv6AXaph3HPE6S3jSnUFTevNgE1f8=",
                            PhoneNumberConfirmed = false,
                            Role = 0,
                            SecurityStamp = "77777777-7777-7777-7777-777777777777",
                            TwoFactorEnabled = false,
                            UserName = "user7"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "88888888-8888-8888-8888-888888888888",
                            Email = "admin1@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN1@DEMO.LOCAL",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJxDaCOle1qgSIaimQzdunI9W3Ztug9zDuikLI75hgpSI=",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "88888888-8888-8888-8888-888888888888",
                            TwoFactorEnabled = false,
                            UserName = "admin1"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99999999-9999-9999-9999-999999999999",
                            Email = "admin2@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN2@DEMO.LOCAL",
                            NormalizedUserName = "ADMIN2",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJxDaCOle1qgSIaimQzdunI9W3Ztug9zDuikLI75hgpSI=",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "99999999-9999-9999-9999-999999999999",
                            TwoFactorEnabled = false,
                            UserName = "admin2"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                            Email = "admin3@demo.local",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN3@DEMO.LOCAL",
                            NormalizedUserName = "ADMIN3",
                            PasswordHash = "AQEAAAAQJwAAEAAAACAAAAAX0H6XuxvVHqyaYJJ1yNDJxDaCOle1qgSIaimQzdunI9W3Ztug9zDuikLI75hgpSI=",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
                            TwoFactorEnabled = false,
                            UserName = "admin3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.Book", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.BookBorrowingRequest", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.User", "Approver")
                        .WithMany("RequestsApproved")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LibraryManagement.Domain.Entities.User", "Requestor")
                        .WithMany("RequestsMade")
                        .HasForeignKey("RequestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Requestor");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.BookBorrowingRequestDetail", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.Book", "Book")
                        .WithMany("BorrowingRequestDetails")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Domain.Entities.BookBorrowingRequest", "Request")
                        .WithMany("Details")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryManagement.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LibraryManagement.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.Book", b =>
                {
                    b.Navigation("BorrowingRequestDetails");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.BookBorrowingRequest", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibraryManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("RequestsApproved");

                    b.Navigation("RequestsMade");
                });
#pragma warning restore 612, 618
        }
    }
}
